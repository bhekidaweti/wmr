{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DDR\\\\Desktop\\\\projects\\\\wiki-memes-react\\\\src\\\\Components\\\\ScrapedMemes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrapedMemes = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [selectedMeme, setSelectedMeme] = useState(null);\n  const API_BASE_URL = process.env.REACT_APP_API_URL || \"https://wmr-jk4d.onrender.com\";\n  useEffect(() => {\n    axios.get(`${API_BASE_URL}/api/scraped-memes`).then(res => setMemes(res.data)).catch(err => console.error(\"Error fetching memes:\", err));\n  }, [API_BASE_URL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: selectedMeme ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedMeme,\n        alt: \"Full Meme\",\n        className: \"meme-details-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: () => setSelectedMeme(null),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-grid\",\n      children: memes.map(meme => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.image_url,\n        alt: \"Scraped Meme\",\n        className: \"meme-thumbnail\",\n        onClick: () => setSelectedMeme(meme.image_url)\n      }, meme.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrapedMemes, \"xVbSJGnqaE2/fJknvl4+yDeJ9As=\");\n_c = ScrapedMemes;\nexport default ScrapedMemes;\nvar _c;\n$RefreshReg$(_c, \"ScrapedMemes\");","map":{"version":3,"names":["React","useState","useEffect","axios","ScrapedMemes","memes","setMemes","selectedMeme","setSelectedMeme","API_BASE_URL","process","env","REACT_APP_API_URL","get","then","res","data","catch","err","console","error","map","meme","image_url","id"],"sources":["C:/Users/DDR/Desktop/projects/wiki-memes-react/src/Components/ScrapedMemes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ScrapedMemes = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [selectedMeme, setSelectedMeme] = useState(null);\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || \"https://wmr-jk4d.onrender.com\";\r\n\r\n  useEffect(() => {\r\n    axios.get(`${API_BASE_URL}/api/scraped-memes`)\r\n      .then((res) => setMemes(res.data))\r\n      .catch((err) => console.error(\"Error fetching memes:\", err));\r\n  }, [API_BASE_URL]);\r\n\r\n  return (\r\n    <div>\r\n      {selectedMeme ? (\r\n        <div className=\"meme-details\">\r\n          <img src={selectedMeme} alt=\"Full Meme\" className=\"meme-details-image\" />\r\n          <button className=\"btn btn-danger\" onClick={() => setSelectedMeme(null)}>Close</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"meme-grid\">\r\n          {memes.map((meme) => (\r\n            <img\r\n              key={meme.id}\r\n              src={meme.image_url}\r\n              alt=\"Scraped Meme\"\r\n              className=\"meme-thumbnail\"\r\n              onClick={() => setSelectedMeme(meme.image_url)}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrapedMemes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,YAAY,GAAG,MAAM;EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMQ,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,+BAA+B;EAErFV,SAAS,CAAC,MAAM;IACdC,KAAK,CAACU,GAAG,CAAE,GAAEJ,YAAa,oBAAmB,CAAC,CAC3CK,IAAI,CAAEC,GAAG,IAAKT,QAAQ,CAACS,GAAG,CAACC,IAAI,CAAC,CAAC,CACjCC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;EAChE,CAAC,EAAE,CAACT,YAAY,CAAC,CAAC;EAElB,oBACE;IAAA,UACGF,YAAY,gBACX;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QAAK,GAAG,EAAEA,YAAa;QAAC,GAAG,EAAC,WAAW;QAAC,SAAS,EAAC;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAG,eACzE;QAAQ,SAAS,EAAC,gBAAgB;QAAC,OAAO,EAAE,MAAMC,eAAe,CAAC,IAAI,CAAE;QAAA,UAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACnF,gBAEN;MAAK,SAAS,EAAC,WAAW;MAAA,UACvBH,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACd;QAEE,GAAG,EAAEA,IAAI,CAACC,SAAU;QACpB,GAAG,EAAC,cAAc;QAClB,SAAS,EAAC,gBAAgB;QAC1B,OAAO,EAAE,MAAMf,eAAe,CAACc,IAAI,CAACC,SAAS;MAAE,GAJ1CD,IAAI,CAACE,EAAE;QAAA;QAAA;QAAA;MAAA,QAMf;IAAC;MAAA;MAAA;MAAA;IAAA;EAEL;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAC,GAlCIpB,YAAY;AAAA,KAAZA,YAAY;AAoClB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}