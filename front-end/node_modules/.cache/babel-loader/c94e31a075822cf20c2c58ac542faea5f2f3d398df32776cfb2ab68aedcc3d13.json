{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DDR\\\\Desktop\\\\projects\\\\wiki-memes-react\\\\src\\\\Components\\\\ScrapedMemes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrapedMemes = () => {\n  _s();\n  const [scrapedMemes, setScrapedMemes] = useState([]);\n  useEffect(() => {\n    const fetchScrapedMemes = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/scraped-memes\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setScrapedMemes(data);\n      } catch (error) {\n        console.error(\"Failed to fetch scraped memes:\", error);\n      }\n    };\n    fetchScrapedMemes();\n\n    // Auto-update memes every 30 seconds\n    const interval = setInterval(fetchScrapedMemes, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-list\",\n      children: scrapedMemes.length > 0 ? scrapedMemes.map((meme, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.image_url,\n          alt: meme.title,\n          className: \"meme-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"meme-title\",\n          children: meme.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading memes live...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrapedMemes, \"sCZRlkMGoTTuOL5jOinK1Pn2KcI=\");\n_c = ScrapedMemes;\nexport default ScrapedMemes;\nvar _c;\n$RefreshReg$(_c, \"ScrapedMemes\");","map":{"version":3,"names":["React","useState","useEffect","ScrapedMemes","scrapedMemes","setScrapedMemes","fetchScrapedMemes","response","fetch","ok","Error","status","data","json","error","console","interval","setInterval","clearInterval","length","map","meme","index","image_url","title"],"sources":["C:/Users/DDR/Desktop/projects/wiki-memes-react/src/Components/ScrapedMemes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst ScrapedMemes = () => {\r\n  const [scrapedMemes, setScrapedMemes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchScrapedMemes = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/api/scraped-memes\");\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setScrapedMemes(data);\r\n      } catch (error) { \r\n        console.error(\"Failed to fetch scraped memes:\", error);\r\n      }\r\n    };\r\n\r\n    fetchScrapedMemes();\r\n\r\n    // Auto-update memes every 30 seconds\r\n    const interval = setInterval(fetchScrapedMemes, 30000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"meme-list\">\r\n        {scrapedMemes.length > 0 ? (\r\n          scrapedMemes.map((meme, index) => (\r\n            <div key={index} className=\"meme-card\">\r\n              <img src={meme.image_url} alt={meme.title} className=\"meme-image\" />\r\n              <h3 className=\"meme-title\">{meme.title}</h3>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>Loading memes live...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrapedMemes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAEnD,MAAMC,YAAY,GAAG,MAAM;EAAA;EACzB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMI,iBAAiB,GAAG,YAAY;MACpC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,CAAC;QACvE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;QAC3D;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;QAClCR,eAAe,CAACO,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAEDR,iBAAiB,EAAE;;IAEnB;IACA,MAAMU,QAAQ,GAAGC,WAAW,CAACX,iBAAiB,EAAE,KAAK,CAAC;IACtD,OAAO,MAAMY,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,uBACI;MAAK,SAAS,EAAC,WAAW;MAAA,UACzBZ,YAAY,CAACe,MAAM,GAAG,CAAC,GACtBf,YAAY,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC3B;QAAiB,SAAS,EAAC,WAAW;QAAA,wBACpC;UAAK,GAAG,EAAED,IAAI,CAACE,SAAU;UAAC,GAAG,EAAEF,IAAI,CAACG,KAAM;UAAC,SAAS,EAAC;QAAY;UAAA;UAAA;UAAA;QAAA,QAAG,eACpE;UAAI,SAAS,EAAC,YAAY;UAAA,UAAEH,IAAI,CAACG;QAAK;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA,GAFpCF,KAAK;QAAA;QAAA;QAAA;MAAA,QAIhB,CAAC,gBAEF;QAAA,UAAG;MAAqB;QAAA;QAAA;QAAA;MAAA;IACzB;MAAA;MAAA;MAAA;IAAA;EACG;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAxCInB,YAAY;AAAA,KAAZA,YAAY;AA0ClB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}